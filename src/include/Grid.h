#pragma once

#include "BasicTypes.h"

class Grid {
    public:
        Grid(size_t N, size_t addNCount = 11);

        // ѕолучить массив базовых точек
        BmpVector base() const;

        // ѕолучить массив дополнительных точек (вместе с базовыми)
        BmpVector additional() const;

        // ѕолучить x по y
        BmpVector xByY(const BmpVector& y);

        // ”становить сетку базовых узлов по линейному закону
        void setLinearGrid();

        /**
         * «адает правую линейно-тригонометрическое сетку в базовых узлах слева, плюс m_additionalNCount
         * дополнительных точек между каждой парой базовых узлов.
         * јктуально дл€ дл€ левосторонней аппроксимации целых и полуцелых индексов.
         */
        void setLinearTrigonometricGrid();

        /**
         * «адает правую линейно-тригонометрическое сетку в базовых узлах справа, плюс m_additionalNCount
         * дополнительных точек между каждой парой базовых узлов.
         * јктуально только дл€ полуцелых индексов.
         */
        void setLinearTrigonometricGridRight();

        /**
         * «амена переменных. »сследование сетки с автоматическим выравниванием экстремумов.
         * ksi = 1/y; delta - экстремумы, полученные на сетке с ksi.
         * eta(i) = ksi(i) + 0.5*(ksi(i+1)-ksi(i-1))*tau*(1+sqrt(delta(i-0.5)/delta(i+0.5)))/(1-sqrt(delta(i-0.5)/delta(i+0.5)))
         * tau = 0.5
         */
        void shiftLinTrigGrid(const BmpVector& delta, BmpReal tau);

        /**
        * ѕолучить вектор максимумов погрешности на интервалах базовых узлов.
        * „исто вспомогательна€ функци€ дл€ исследовани€ смещени€ узлов дл€ выравнивани€ погрешности.
        * »спользуетс€ после получени€ погрешности, перед shiftLinTrigGrid()
        */
        BmpVector intervalMaximums();

    private:
        // „исло базовых точек
        size_t m_N_base;
        // „исло дополнительных точек между базовыми
        size_t m_additionalNCount;
        // ћассив базовых точек
        BmpVector m_base;
        // ћассив дополнительных точек
        BmpVector m_additional;

        /* «аполнить сетку дополнительными точками */
        void setAdditionalDots();

        /**
         * ¬ правосторонней аппроксимации дл€ определени€ распределени€ узлов интерпол€ции
         * используетс€ замена переменных ksi = 1/y. Ќо расчет значени€ интеграла в точке ведетс€ по переменной y
         * ( точнее говор€ по x = ln(exp(y) - 1) ). ѕоэтому нужны нижеприведенные вспомогательные функции.
         */
        /* ¬ыполнить замену переменных y = 1/ksi */
        void changeGrid(BmpVector& v);
};
