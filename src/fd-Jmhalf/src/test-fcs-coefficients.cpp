#include "Common.h"
#include "FileSys.h"

namespace {

    // Коэффициенты для индекса k = -1/2
    const BmpVector b_mhalf = {
        1.00000000000000022, -0.41421356237309515, 0.48097395201231308, -0.31443745684377605, 0.35496973905796525, -0.26391469912742610, 0.29305220065772453,
       -0.23206012422784597, 0.25480909731988405, -0.20961507725316636, 0.22827198241767724, -0.19269402581588935, 0.20850412514677033, -0.17934271566143664,
        0.19305732762114028, -0.16845640223916253, 0.18056386586844170, -0.15935707527675091, 0.17019275877281642, -0.15160238383284011, 0.16140657992677773,
       -0.14488973151960657, 0.15384051431503362, -0.13900414944762135, 0.14723715862015460, -0.13378812964569098, 0.14140906612540924, -0.12912325802251828,
        0.13621609350926644, -0.12491855193815647, 0.13155110392581695, -0.12110278860777168, 0.12733061461119022,-0.11761930413804721, 0.12348848883008756,
       -0.11442237441589655, 0.11997156715133331, -0.11147463877385461, 0.11673657115056887, -0.10874522884795892, 0.11374786384105723, -0.10620838520960593,
        0.11097580026521373, -0.10384241822419096, 0.10839549296611649, -0.10162891623985279, 0.10598587447494355, -0.09955213438673234, 0.10372897595078695,
       -0.09759851721451281, 0.10160936547917465, -0.09575632184163210, 0.09961370590635248, -0.09401531751504925, 0.09773040328255238, -0.09236654391281224,
        0.09594932477105972, -0.09080211507512911, 0.09426157037285680, -0.08931505911688105,  0.09265928674694333, -0.08789918624863347, 0.09113551425473627,
       -0.08654897937862024, 0.08968406044561429, -0.08525950286539473,  0.08829939474918186, -0.08402632596474541,
    };

    // Вычислить коэффициенты всюду сходящегося ряда Интегральной ФД
    BmpVector calculate(size_t N) {
        BmpVector cn = { 1.0 / 2 };
        for (size_t n = 1; n < N; ++n) {
            BmpReal sum = 0;
            for (size_t p = 0; p <= n; ++p) {
                sum += b_mhalf.at(p)*b_mhalf.at(n - p);
            }
            BmpReal result = ((n + 1)*cn.at(n - 1) + sum) / (n + 2);
            cn.push_back(result);
        }
        return cn;
    }

    BmpVector c_n = {
        0.5, 0.0571909584179365, 0.32627341363306145, 0.05555337454026419, 0.24658846860286468, 0.05073748578641944, 0.2000292759927668, 0.046248645757370185,
        0.16919747074124367, 0.04243339943502982, 0.14714269473929523, 0.03922350305150957, 0.1305157822847108, 0.036504513269322914, 0.11749388727681387,
        0.03417682128363331, 0.10699573032743079, 0.0321623470455412, 0.09833733348435542, 0.030401224255755907, 0.09106388018262407, 0.028847490822020205,
        0.08486060243799427, 0.027465534400484957, 0.07950240515223343, 0.026227437203921428, 0.07482385935080225, 0.025111045694524017, 0.07070053682482372,
        0.02409857188256913, 0.06703696772323861, 0.02317557364450819, 0.06375862474843785, 0.022330203939043506, 0.06080644154622106, 0.021552651692442734,
        0.058132974593236936, 0.020834720527873125, 0.05569965933125015, 0.02016950769407704, 0.0534748119817067, 0.01955115665526985,0.05143215013165339,
        0.018974664446412215, 0.049549680986108166, 0.018435730193709414, 0.0478088545890357, 0.017930634903970573, 0.04619391091732902, 0.017456145243534938,
        0.04469137079993952, 0.017009435896327186, 0.04328963488953086, 0.016588026439274404, 0.04197866475792093, 0.016189729656644922, 0.04074972707877874,
        0.015812608938973183, 0.03959518675467695, 0.015454942950545393, 0.03850833836543254, 0.015115196153261408, 0.037483267876889464, 0.014791994080279812,
        0.036514738435317745, 0.014484102486007185, 0.03559809547535675
    };

    BmpReal gorner(BmpReal x) {
        // Для double-точности достаточно 36 коэффициентов (см препринт 1)
        constexpr int N = 36;
        BmpReal exp_mx = exp(-x);
        BmpReal g = pow(1 + 2 * exp_mx, -1);
        BmpReal sum = g*c_n.at(N - 1)*(N-1);
        for (int n = N - 2; n > -1; --n) {
            sum = g*(c_n.at(n) + sum);
        }
        return 4*pi()*g*sum;
    }
}

TEST_CASE("coefficients") {
    INFO("Вычисление коэффициентов всюду сходящегося ряда для интегральной ФД");
    nlohmann::json coefficients = calculate(67);
    filesys::writeFile("Jmhalf-fcs-cn.json", coefficients);
}

TEST_CASE("calculate") {
    INFO("Вычисление интегральной ФД в точке x = 0");
    setPreciseOutput();
    std::cout << gorner(0) << std::endl;
}